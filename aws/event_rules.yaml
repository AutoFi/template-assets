AWSTemplateFormatVersion: 2010-09-09
Description: The template used to create event rules for the Port AWS exporter.
Parameters:
  PortAWSExporterStackName:
    Description: Name of the Port AWS exporter stack name
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Default: serverlessrepo-port-aws-exporter
Resources:
  EcsServiceEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
        source:
          - aws.ecs
        detail:
          eventSource:
            - ecs.amazonaws.com
          eventName:
            - prefix: CreateService
            - prefix: UpdateService
            - prefix: DeleteService
      Name: port-aws-exporter-sync-ecs-trails
      State: ENABLED
      Targets:
        - Id: PortAWSExporterEventsQueue
          Arn:
            Fn::ImportValue:
              Fn::Sub: ${PortAWSExporterStackName}-EventsQueueARN
          InputTransformer:
            InputPathsMap:
              awsRegion: $.detail.awsRegion
              clusterArn: $.detail.responseElements.service.clusterArn
              eventName: $.detail.eventName
              serviceArn: $.detail.responseElements.service.serviceArn
              serviceName: $.detail.responseElements.service.serviceName
            InputTemplate: >-
              {
                "resource_type": "AWS::ECS::Service",
                "region": "\"<awsRegion>\"",
                "identifier": "if \"<eventName>\" | startswith(\"Delete\") then \"<serviceName>\" else \"<serviceArn>|<clusterArn>\" end",
                "action": "if \"<eventName>\" | startswith(\"Delete\") then \"delete\" else \"upsert\" end"
              }
  LambdaEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
        source:
          - aws.lambda
        detail:
          eventSource:
            - lambda.amazonaws.com
          eventName:
            - prefix: CreateFunction
            - prefix: UpdateFunctionConfiguration
            - prefix: TagResource
            - prefix: UntagResource
            - prefix: DeleteFunction
      Name: port-aws-exporter-sync-lambda-trails
      State: ENABLED
      Targets:
        - Id: PortAWSExporterEventsQueue
          Arn:
            Fn::ImportValue:
              Fn::Sub: ${PortAWSExporterStackName}-EventsQueueARN
          InputTransformer:
            InputPathsMap:
              awsRegion: $.detail.awsRegion
              eventName: $.detail.eventName
              requestFunctionName: $.detail.requestParameters.functionName
              requestResource: $.detail.requestParameters.resource
              responseFunctionName: $.detail.responseElements.functionName
            InputTemplate: |-
              {
                "resource_type": "AWS::Lambda::Function",
                "region": "\"<awsRegion>\"",
                "identifier": "if \"<responseFunctionName>\" != \"\" then \"<responseFunctionName>\" elif \"<requestResource>\" != \"\" then \"<requestResource>\" | split(\":\")[-1] else \"<requestFunctionName>\" end",
                "action": "if \"<eventName>\" | test(\"DeleteFunction[^a-zA-Z]*$\") then \"delete\" else \"upsert\" end"
              }
  SNSEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source:
          - aws.sns
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - sns.amazonaws.com
          eventName:
            - prefix: CreateTopic
            - prefix: Subscribe
            - prefix: Unsubscribe
            - prefix: TagResource
            - prefix: UntagResource
            - prefix: DeleteTopic
      Name: port-aws-exporter-sync-sns-trails
      State: ENABLED
      Targets:
        - Id: PortAWSExporterEventsQueue
          Arn:
            Fn::ImportValue:
              Fn::Sub: ${PortAWSExporterStackName}-EventsQueueARN
          InputTransformer:
            InputPathsMap:
              awsRegion: $.detail.awsRegion
              eventName: $.detail.eventName
              requestResourceArn: $.detail.requestParameters.resourceArn
              requestSubscriptionArn: $.detail.requestParameters.subscriptionArn
              requestTopicArn: $.detail.requestParameters.topicArn
              responseTopicArn: $.detail.responseElements.topicArn
            InputTemplate: |-
              {
                "resource_type": "AWS::SNS::Topic",
                "region": "\"<awsRegion>\"",
                "identifier": "\"<eventName>\" | if test(\"CreateTopic[^a-zA-Z]*$\") then \"<responseTopicArn>\" elif test(\"Unsubscribe[^a-zA-Z]*$\") then \"<requestSubscriptionArn>\"[:\"<requestSubscriptionArn>\" | rindex(\":\")] elif test(\"TagResource|UntagResource[^a-zA-Z]*$\") then \"<requestResourceArn>\" elif test(\"DeleteTopic[^a-zA-Z]*$\") then \"<requestTopicArn>\" | split(\":\")[-1] else \"<requestTopicArn>\" end",
                "action": "if \"<eventName>\" | test(\"DeleteTopic[^a-zA-Z]*$\") then \"delete\" else \"upsert\" end"
              }
  SQSEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source:
          - aws.sqs
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - sqs.amazonaws.com
          eventName:
            - prefix: CreateQueue
            - prefix: SetQueueAttributes
            - prefix: TagQueue
            - prefix: UntagQueue
            - prefix: DeleteQueue
      Name: port-aws-exporter-sync-sqs-trails
      State: ENABLED
      Targets:
        - Id: PortAWSExporterEventsQueue
          Arn:
            Fn::ImportValue:
              Fn::Sub: ${PortAWSExporterStackName}-EventsQueueARN
          InputTransformer:
            InputPathsMap:
              awsRegion: $.detail.awsRegion
              eventName: $.detail.eventName
              requestQueueUrl: $.detail.requestParameters.queueUrl
              responseQueueUrl: $.detail.responseElements.queueUrl
            InputTemplate: |-
              {
                "resource_type": "AWS::SQS::Queue",
                "region": "\"<awsRegion>\"",
                "identifier": "\"<eventName>\" | if test(\"CreateQueue[^a-zA-Z]*$\") then \"<responseQueueUrl>\" elif test(\"DeleteQueue[^a-zA-Z]*$\") then \"<requestQueueUrl>\" | split(\"/\")[-1] else \"<requestQueueUrl>\" end",
                "action": "if \"<eventName>\" | test(\"DeleteQueue[^a-zA-Z]*$\") then \"delete\" else \"upsert\" end"
              }
  S3BucketEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - prefix: CreateBucket
            - prefix: PutBucket
            - prefix: DeleteBucket
      Name: port-aws-exporter-sync-s3-trails
      State: ENABLED
      Targets:
        - Id: PortAWSExporterEventsQueue
          Arn:
            Fn::ImportValue:
              Fn::Sub: ${PortAWSExporterStackName}-EventsQueueARN
          InputTransformer:
            InputPathsMap:
              awsRegion: $.detail.awsRegion
              eventName: $.detail.eventName
              requestBucketName: $.detail.requestParameters.bucketName
            InputTemplate: |-
              {
                "resource_type": "AWS::S3::Bucket",
                "region": "\"<awsRegion>\"",
                "identifier": "\"<requestBucketName>\"",
                "action": "if \"<eventName>\" | test(\"DeleteBucket[^a-zA-Z]*$\") then \"delete\" else \"upsert\" end"
              }
  RdsInstanceEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source:
          - aws.rds
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - rds.amazonaws.com
          eventName:
            - prefix: CreateDBInstance
            - prefix: CreateDBInstanceReadReplica
            - prefix: RestoreDBInstanceFromDBSnapshot
            - prefix: RestoreDBInstanceFromS3
            - prefix: RestoreDBInstanceToPointInTime
            - prefix: ModifyDBInstance
            - prefix: AddTagsToResource
            - prefix: RemoveTagsFromResource
            - prefix: DeleteDBInstance
      Name: port-aws-exporter-sync-rds-trails
      State: ENABLED
      Targets:
        - Id: PortAWSExporterEventsQueue
          Arn:
            Fn::ImportValue:
              Fn::Sub: ${PortAWSExporterStackName}-EventsQueueARN
          InputTransformer:
            InputPathsMap:
              awsRegion: $.detail.awsRegion
              eventName: $.detail.eventName
              requestDBInstanceIdentifier: $.detail.requestParameters.dBInstanceIdentifier
              requestResourceName: $.detail.requestParameters.resourceName
              requestTargetDBInstanceIdentifier: $.detail.requestParameters.targetDBInstanceIdentifier
            InputTemplate: |-
              {
                "resource_type": "AWS::RDS::DBInstance",
                "region": "\"<awsRegion>\"",
                "identifier": "if \"<requestTargetDBInstanceIdentifier>\" != \"\" then \"<requestTargetDBInstanceIdentifier>\" elif \"<requestDBInstanceIdentifier>\" != \"\" then \"<requestDBInstanceIdentifier>\" else \"<requestResourceName>\" | split(\":\")[-1] end",
                "action": "if \"<eventName>\" | test(\"DeleteDBInstance[^a-zA-Z]*$\") then \"delete\" else \"upsert\" end"
              }
  DynamoDbEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      EventPattern:
        source:
          - aws.dynamodb
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - dynamodb.amazonaws.com
          eventName:
            - prefix: CreateTable
            - prefix: UpdateTable
            - prefix: UpdateTimeToLive
            - prefix: UpdateContinuousBackups
            - prefix: TagResource
            - prefix: UntagResource
            - prefix: DeleteTable
      Name: port-aws-exporter-sync-dynamodb-trails
      State: ENABLED
      Targets:
        - Id: PortAWSExporterEventsQueue
          Arn:
            Fn::ImportValue:
              Fn::Sub: ${PortAWSExporterStackName}-EventsQueueARN
          InputTransformer:
            InputPathsMap:
              awsRegion: $.detail.awsRegion
              eventName: $.detail.eventName
              requestResourceArn: $.detail.requestParameters.resourceArn
              requestTableName: $.detail.requestParameters.tableName
            InputTemplate: |-
              {
                "resource_type": "AWS::DynamoDB::Table",
                "region": "\"<awsRegion>\"",
                "identifier": "if \"<requestTableName>\" != \"\" then \"<requestTableName>\" else \"<requestResourceArn>\" | split(\"/\")[-1] end",
                "action": "if \"<eventName>\" | test(\"DeleteTable[^a-zA-Z]*$\") then \"delete\" else \"upsert\" end"
              }
