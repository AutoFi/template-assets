{
  "resources": [
    {
      "kind": "AWS::Lambda::Function",
      "port": {
        "entity": {
          "mappings": [
            {
              "identifier": ".FunctionName",
              "title": ".FunctionName",
              "blueprint": "lambda",
              "properties": {
                "link": "\"https://console.aws.amazon.com/go/view?arn=\" + .Arn",
                "description": ".Description",
                "memorySize": ".MemorySize",
                "ephemeralStorageSize": ".EphemeralStorage.Size",
                "timeout": ".Timeout",
                "runtime": ".Runtime",
                "packageType": ".PackageType",
                "environment": ".Environment",
                "architectures": ".Architectures",
                "layers": ".Layers",
                "tags": ".Tags",
                "iamRole": ".Role | if . == null then null else \"https://console.aws.amazon.com/go/view?arn=\" + . end",
                "arn": ".Arn"
              },
              "relations": {
                "region": ".Arn | split(\":\")[3]"
              }
            }
          ]
        }
      }
    },
    {
      "kind": "AWS::AppRunner::Service",
      "port": {
        "entity": {
          "mappings": [
            {
              "identifier": ".ServiceId",
              "title": ".ServiceName",
              "blueprint": "apprunner",
              "properties": {
                "link": "\"https://console.aws.amazon.com/go/view?arn=\" + .ServiceArn",
                "status": ".Status",
                "memory": ".InstanceConfiguration.Memory",
                "cpu": ".InstanceConfiguration.Cpu",
                "egressType": ".NetworkConfiguration.EgressConfiguration.EgressType",
                "isPubliclyAccessible": ".NetworkConfiguration.IngressConfiguration.IsPubliclyAccessible",
                "observabilityEnabled": ".ObservabilityConfiguration.ObservabilityEnabled",
                "autoDeploymentsEnabled": ".SourceConfiguration.AutoDeploymentsEnabled",
                "healthCheckConfiguration": ".HealthCheckConfiguration",
                "imageConfiguration": ".SourceConfiguration.ImageRepository.ImageConfiguration",
                "imageIdentifier": ".SourceConfiguration.ImageRepository.ImageIdentifier",
                "serviceUrl": "\"https://\" + .ServiceUrl",
                "iamRole": ".InstanceConfiguration.InstanceRoleArn | if . == null then null else \"https://console.aws.amazon.com/go/view?arn=\" + . end",
                "arn": ".ServiceArn"
              },
              "relations": {
                "region": ".ServiceArn | split(\":\")[3]"
              }
            }
          ]
        }
      }
    },
    {
      "kind": "AWS::ECS::Service",
      "port": {
        "entity": {
          "mappings": [
            {
              "identifier": ".ServiceName",
              "title": ".ServiceName",
              "blueprint": "core_service",
              "properties": {
                "service": ".ServiceName",
                "app": ".Tags // [] | if isempty(.[] | select(.Key == \"app\")) then \"unknown\" else .[] | select(.Key == \"app\") | .Value end",
                "cluster": ".Cluster | split(\"/\")[1]",
                "desiredCount": ".DesiredCount",
                "taskDef": ".TaskDefinition | split(\"/\")[-1] | split(\":\")[0]",
                "arn": ".ServiceArn"
              },
              "relations": {
                "region": ".ServiceArn | split(\":\")[3]",
                "cloudAccount": ".ServiceArn | split(\":\")[4]",
                "stack": ".Tags // [] | if isempty(.[] | select(.Key == \"stack\")) then \"unknown\" else .[] | select(.Key == \"stack\") | .Value end",
                "env": ".Tags // [] | if isempty(.[] | select(.Key == \"env\")) then \"unknown\" else .[] | select(.Key == \"env\") | .Value end",
                "binaryVersion": ".Tags | [.[] | { stack: select(.Key == \"stack\").Value, env: select(.Key == \"env\").Value, app: select(.Key == \"app\").Value } ] | .[0] | .stack + \"-\" + .env + \"-\" + .app"
              }
            }
          ]
        }
      }
    }
  ]
}