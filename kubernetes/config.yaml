resources: # List of K8s resources to list, watch, and export to Port.
  - kind: v1/namespaces # group/version/resource (G/V/R) format
    selector:
      query: .metadata.name | startswith("kube") | not # JQ boolean query. If evaluated to false - skip syncing the object.
    port:
      entity:
        mappings: # Mappings between one K8s object to one or many Port Entities. Each value is a JQ query.
          - identifier: .metadata.name + "-" + "{CLUSTER_NAME}"
            title: .metadata.name
            blueprint: '"namespace"'
            properties:
              creationTimestamp: .metadata.creationTimestamp
              labels: .metadata.labels
            relations:
              Cluster: '"{CLUSTER_NAME}"'


# Defines cluster using the uniq 
  - kind: v1/namespaces
    selector:
      query: .metadata.name | contains("kube-system")
    port:
      entity:
        mappings:
          - identifier: '"{CLUSTER_NAME}"'
            title: '"{CLUSTER_NAME}"'
            blueprint: '"cluster"'

  - kind: apps/v1/deployments
    selector:
      query: .metadata.namespace | startswith("kube") | not
    port:
      entity:
        mappings:
          - identifier: .metadata.name + "-" + .metadata.namespace + "-" + "{CLUSTER_NAME}"
            title: .metadata.name
            icon: '"Deployment"'
            blueprint: '"deployment"'
            properties:
              creationTimestamp: .metadata.creationTimestamp
              replicas: .spec.replicas
              hasPrivileged: .spec.template.spec.containers | [.[].securityContext.privileged] | any
              hasLatest: .spec.template.spec.containers[].image | contains(":latest")
              hasLimits: .spec.template.spec.containers | all(has("resources") and (.resources.limits.memory and .resources.limits.cpu))
              strategy: .spec.strategy.type
              availableReplicas: .status.availableReplicas
              labels: .metadata.labels
              containers: (.spec.template.spec.containers | map({name, image, resources}))
            relations:
              Namespace: .metadata.namespace + "-" + "{CLUSTER_NAME}"

  - kind: v1/pods
    selector:
      query: (.metadata.namespace | startswith("kube") | not ) and (.metadata.ownerReferences != null)
    port:
      entity:
        mappings:
          - identifier: .metadata.name + "-" + .metadata.namespace + "-" + "{CLUSTER_NAME}"
            title: .metadata.name
            icon: '"Microservices"'
            blueprint: '"pod"'
            properties:
              startTime: .status.startTime
              phase: .status.phase
              labels: .metadata.labels
              containers: (.spec.containers | map({image, resources})) + .status.containerStatuses | group_by(.image) | map(add)
              conditions: .status.conditions
            relations:
              Deployment: (.metadata.ownerReferences[0].name | split("-") | .[:-1] | join("-")) + "-" + .metadata.namespace + "-" + "{CLUSTER_NAME}"
              Node: (.spec.nodeName) | (split(".")|join("_")) + "-" + "{CLUSTER_NAME}"

  
  - kind: v1/nodes
    port:
      entity:
        mappings:
          - identifier: (.metadata.name) | (split(".")|join("_")) + "-" + "{CLUSTER_NAME}"
            title: .metadata.name + "-" + "{CLUSTER_NAME}"
            icon: '"Node"'
            blueprint: '"node"'
            properties:
              creationTimestamp: .metadata.creationTimestamp
              totalCPU: .status.allocatable.cpu
              totalMemory: .status.allocatable.memory
              labels: .metadata.labels
              kubeletVersion: .status.nodeInfo.kubeletVersion | split("-") | .[0]
              ready: .status.conditions[] | select(.type == "Ready") | .status
            relations:
              Cluster: '"{CLUSTER_NAME}"'

  